{
   "post common" : {
      "prefix" : [
         "from my_src import *"
      ],
      "replace" : {
         "num2str(" : "str(",
         "length("  : "len(",
         "sort("    : "my_sort("
      }
   },
   "post rename" : {
      "prefix" : [
         "from __future__ import division",
         "from pylab import * # https://stsievert.com/blog/2015/09/01/matlab-to-python/"
      ],
      "replace" : {
         "||"      : "or",
         "&&"      : "and",
         "~="      : "!=",
         "elseif"  : "elif",
         "else"    : "else:",
         "true"    : "True",
         "false"   : "False",
         "isempty" : "my_isempty",
         "size("   : "my_size(",
         "error("  : "raise Exception("
      },
      "multi-line-regex" : {
         ";$"                : "",
         "%"                 : "#",
         "\\s*\\.\\.\\.\\s*" : " "
      },
      "single-line-regex" : {
         "=([^'\\s=,(]+):([^'\\s]+)"                        : "=range({0}, {1}+1)",
         "for ([a-zA-Z0-9_]+)=(.+)"                         : "for {0} in {1}:",
         "if (.+)"                                          : "if {0}:",
         "while (.+)"                                       : "while {0}:",
         "end$"                                             : "#end",
         "@\\(([^)]+)\\)"                                   : "lambda {0}, **kwargs:",
         "zeros(\\([A-Za-z0-9_]+\\s*,\\s*[A-Za-z0-9_]+\\))" : "zeros({0})",
         "ones(\\([A-Za-z0-9_]+\\s*,\\s*[A-Za-z0-9_]+\\))"  : "ones({0})",
         
         "\\[([^;\\s]+)\\s*;\\s*([^\\s\\]]+)\\]"            : "array([[ {0} ],[ {1} ]])",
         "\\[([^,'\\s]+)[\\s]+([^'\\s\\]]+)\\]"             : "array([ {0}, {1} ])",
         "(=\\s*)\\[(.+)\\]$"                               : "{0}array([ {1} ])",
         "(=\\s*)\\[\\]"                                    : "{0}array([])",
         ";"                                                : "",
         
         "\\((:,[^)]+)\\)"                                  : "[{0}]",
         "\\(([^)]+,:)\\)"                                  : "[{0}]",
         "([A-Za-z0-9_])\\((:,[^,]+)\\)"                    : "{0}[{1}]",
         "([A-Za-z0-9_])\\(([^,]+,:)\\)"                    : "{0}[{1}]",
         "\\{([^}]+)\\}"                                    : "[{0}]",
         "([^A-Za-z][A-Za-z])\\(([A-Za-z])\\)"              : "{0}[{1}]",
         "\\(([^)]+)\\)(\\s*=[^=])"                         : "[{0}]{1}",
         "^([^(]+)\\((.+)\\)(\\s*=[^=])"                    : "{0}[{1}]{2}",
         "([^sl][^te][^rn])\\(([a-z])\\)"                   : "{0}[{1}]",
         
         "([A-Za-z0-9_])\\[([^,:A-Z\\]]+)\\]"               : "{0}[{1}-1]",
         "\\[(:,)([^,:A-Z\\]]+)\\]"                         : "[{0}{1}-1]",
         "\\[([^,:A-Z]+)(,:)\\]"                            : "[{0}-1{1}]",
         "\\(?([-a-z0-9]+)\\)?:\\(?([-a-z0-9]+)\\)?"        : "({0}-1):({1}-1)",
         
         "([^.*])\\*([^*])"                                 : "{0} @ {1}",
         "\\.\\*"                                           : " * ",
         "([-.0-9]+) @"                                     : "{0} *",
         "@ ([-.0-9]+)"                                     : "* {0}",
         
         "^([^']+)'([^']+)$"                                : "{0}.T{1}",
         "\\(([^'(]+[A-Za-z0-9_]+)'\\)"                     : "({0}.T)"
      },
      "fix-functions" : {
         "prefix" : {
            "verifygraph" : "return True, 'Graph is ok.' # TODO - Python equivalent of nodelabels and edges?"
         }
      }
   },
   "post smop" : {
      "replace" : {
         "    "          : "   ",
         "libsmop"       : "smop.libsmop",
         "disp(concat("  : "disp(''.join(",
         "error(concat(" : "error(''.join(",
         "concat(['"     : "''.join(['",
         "concat("       : "my_concat(",
         "disp"          : "my_disp",
         "norm("         : "my_norm("
      }
   }
}