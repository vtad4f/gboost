{
   "post common" : {
      "prefix" : [
         "from my_src import *"
      ],
      "replace" : {
         "num2str" : "str",
         "length"  : "len"
      }
   },
   "post rename" : {
      "prefix" : [
         "from __future__ import division",
         "from pylab import *"
      ],
      "replace" : {
         "||"     : "or",
         "elseif" : "elif:",
         "else"   : "else:",
         "end"    : "#end"
      },
      "multi-line-regex" : {
         ";$"                : "",
         "%"                 : "#",
         "\\s*\\.\\.\\.\\s*" : " "
      },
      "single-line-regex" : {
         "=([^'\\s=,(]+):([^'\\s]+)"                    : "=range({0}, {1} + 1)",
         "for ([a-zA-Z0-9_]+)="                         : "for {0} in ",
         "if (.+)"                                      : "if {0}:",
         "\\((:,[^)]+)\\)"                              : "[{0}]",
         "\\(([^)]+,:)\\)"                              : "[{0}]",
         "@\\(([^)]+)\\)"                               : "lambda {0}:",
         "zeros(\\([A-Za-z0-9_]+,\\s*[A-Za-z0-9_]+\\))" : "zeros({0})",
         "ones(\\([A-Za-z0-9_]+,\\s*[A-Za-z0-9_]+\\))"  : "ones({0})"
      },
      "fix-functions" : "true"
   },
   "post smop" : {
      "replace" : {
         "    "          : "   ",
         "libsmop"       : "smop.libsmop",
         "disp(concat("  : "disp(''.join(",
         "error(concat(" : "error(''.join(",
         "concat(['"     : "''.join(['",
         "concat("       : "my_concat(",
         "disp"          : "my_disp",
         "sort("         : "my_sort(",
         "norm("         : "my_norm("
      },
      "single-line-regex" : {
         ",nargout=[0-9]+" : ""
      }
   }
}